// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Realtor {
  id            Int      @id @default(autoincrement())
  name          String?
  is_active     Boolean
  deactive_date DateTime
  photo         String
  login         String
  password      String
  firma_id      Firma[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("realtor")
}

model Firma {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Realtor   Realtor? @relation(fields: [realtorId], references: [id])
  realtorId Int?

  @@map("firma")
}

model BuildingCondition {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("building_condition")
}

model BuildingSeria {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("building_seria")
}

model WaterSupply {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("water_supply")
}

model Parking {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("parking")
}

model ResidentType {
  id            Int          @id @default(autoincrement())
  name          String?
  objectType_id ObjectType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("resident_type")
}

model ObjectType {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ResidentType   ResidentType? @relation(fields: [residentTypeId], references: [id])
  residentTypeId Int?
  Object         Object?       @relation(fields: [objectId], references: [id])
  objectId       Int?

  @@map("object_type")
}

model ObjectCategory {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("object_category")
}

model ObjectStatus {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("object_status")
}

model Currency {
  id   Int     @id @default(autoincrement())
  name String?
  rate String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("currency")
}

model Renovation {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("renovation")
}

model WindowSide {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("window_side")
}

model RoomType {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("root_type")
}

model Ownership {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("owner_ship")
}

model ReasonDeleting {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("reason_deleting")
}

model OwnerCoorperation {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("owner_coorperation")
}

model RelationshipType {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("relationship_type")
}

model Region {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  District   District? @relation(fields: [districtId], references: [id])
  districtId Int?
  Object     Object?   @relation(fields: [objectId], references: [id])
  objectId   Int?

  @@map("Region")
}

model District {
  id        Int      @id @default(autoincrement())
  name      String?
  region_id Region[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("district")
}

model Metro {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("metro")
}

model WallMaterial {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("wall_material")
}

model HeatingSystem {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("heating_system")
}

model Neighborhood {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("neighborhood")
}

model Street {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("Street")
}

model Overlaps {
  id   Int     @id @default(autoincrement())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Object    Object?  @relation(fields: [objectId], references: [id])
  objectId  Int?

  @@map("overlaps")
}

model Object {
  id                       Int                 @id @default(autoincrement())
  name                     String?
  realtor_id               Realtor[]
  object_type_id           ObjectType[]
  resident_type_id         ResidentType[]
  object_category_id       ObjectCategory[]
  object_status_id         ObjectStatus[]
  is_studio                Boolean
  floor                    Int
  floor_in_building        Int
  total_area               Decimal
  live_area                Decimal
  kitchen_area             Decimal
  rooms_area               Decimal
  price                    Decimal
  currency_id              Currency[]
  price_per_square         Decimal
  price_type               String
  renovation_id            Renovation[]
  windor_side_id           WindowSide[]
  room_type_id             RoomType[]
  is_apartment             Boolean
  is_luxury                Boolean
  ceiling_height           Int
  combined_bath_count      Int
  separate_bath_count      Int
  loggia_count             Int
  loggia_desciption        String
  balcony_count            Int
  balcony_description      String
  general_description      String
  cadastral_number         Int
  document                 String
  layout                   String
  fotos                    String
  online_show              Boolean
  video                    String
  ownership_id             Ownership[]
  reason_deleting_id       ReasonDeleting[]
  owner_coorparetion_id    OwnerCoorperation[]
  relationship_type_id     RelationshipType[]
  commision_amount         Decimal
  commision_comment        String
  deposit_amount           Decimal
  deposit_paid             Decimal
  owner_price_ideal        Decimal
  owner_price_real         Decimal
  owner_price_minimal      Decimal
  region_id                Region[]
  district_id              District[]
  area_id                  String
  neighborhood_id          Neighborhood[]
  street_id                Street[]
  house_number             Int
  apartment_id             Int
  location                 String
  landmark                 String
  metro_id                 Metro[]
  location_description     String
  building_condition_id    BuildingCondition[]
  building_seria_id        BuildingSeria[]
  building_year            Int
  wall_material_id         WallMaterial[]
  overlaps_id              Overlaps[]
  water_supply_id          WaterSupply[]
  heating_system_id        HeatingSystem[]
  is_gas                   Boolean
  is_electric              Boolean
  passeger_elevators_count Int
  freight_elevators_count  Int
  is_building_security     Boolean
  parking_id               Parking[]
  is_demolition_planned    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("object")
}
